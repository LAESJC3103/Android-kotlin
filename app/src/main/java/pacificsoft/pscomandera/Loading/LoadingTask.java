package pacificsoft.pscomandera.Loading;import android.app.AlertDialog;import android.content.Context;import android.os.AsyncTask;import android.view.LayoutInflater;import android.view.View;import android.widget.TextView;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import java.lang.reflect.Type;import java.util.ArrayList;import java.util.List;import pacificsoft.pscomandera.Enum.EnumTipoAlmacen;import pacificsoft.pscomandera.Enum.EnumTipoPeticionAsyncTask;import pacificsoft.pscomandera.KSOAP2.WebService;import pacificsoft.pscomandera.Modelo.Caja;import pacificsoft.pscomandera.Modelo.Carta;import pacificsoft.pscomandera.Modelo.Comanda;import pacificsoft.pscomandera.Modelo.ComandaArticulo;import pacificsoft.pscomandera.Modelo.ComandaArticuloRequest;import pacificsoft.pscomandera.Modelo.ComandaModificador;import pacificsoft.pscomandera.Modelo.ComandaRequest;import pacificsoft.pscomandera.Modelo.DatosRegresados;import pacificsoft.pscomandera.Modelo.LoginComandera;import pacificsoft.pscomandera.Modelo.Mesa;import pacificsoft.pscomandera.Modelo.MesaCuenta;import pacificsoft.pscomandera.Modelo.Modificador;import pacificsoft.pscomandera.Modelo.ModificadorSeleccionado;import pacificsoft.pscomandera.Modelo.Nota;import pacificsoft.pscomandera.Modelo.Receta;import pacificsoft.pscomandera.Modelo.ResultadoAlmacen;import pacificsoft.pscomandera.Modelo.ResultadoCajas;import pacificsoft.pscomandera.Modelo.ResultadoGenerico;import pacificsoft.pscomandera.Modelo.ResultadoLoginComandera;import pacificsoft.pscomandera.Modelo.Terminal;import pacificsoft.pscomandera.R;/** * Created by desarrollo ORM on 2/14/2018. */public class LoadingTask  extends AsyncTask<String, Void, DatosRegresados>  {    private Context context = null;    private EnumTipoPeticionAsyncTask peticion;    private AlertDialog pd;    private WebService service = null;    private String msjProgressDialog = "";    private Object data;    private boolean showDefaultDialog;    private Gson gson;    protected LoadingTaskListener mListener;    /* FIN DE OPCIONES */    public interface LoadingTaskListener{        void onLoadedDataLoadingTask(EnumTipoPeticionAsyncTask peticion,DatosRegresados datosregresados);    }    public LoadingTask(WebService Parservice,Context context, EnumTipoPeticionAsyncTask peticion, String msjProgressDialog,Object data, LoadingTaskListener mListener,boolean showDefaultDialog) {        this.peticion = peticion;        this.service = Parservice;        this.msjProgressDialog = msjProgressDialog;        this.data = data;        this.mListener = mListener;        this.context = context;        this.showDefaultDialog = showDefaultDialog;        gson = new Gson();    }    public void onPreExecute() {        if(showDefaultDialog){            switch (peticion){//            case LOGIN_COMANDERA:{//                break;//            }                default:                    AlertDialog.Builder builder;                    Context mContext = context;                    LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);                    View layout = inflater.inflate(R.layout.progress_dialog_custom,null);                    TextView text = (TextView) layout.findViewById(R.id.txtProgressDialogCustom);                    text.setText(msjProgressDialog);                    builder = new AlertDialog.Builder(mContext);                    builder.setView(layout);                    builder.setCancelable(false);                    pd = builder.create();                    pd.show();                    break;            }        }    }    @Override    protected DatosRegresados doInBackground(String... strings) {        DatosRegresados datosRegresados = new DatosRegresados();        datosRegresados.setError(false);        String res = "";        try{            switch (peticion) {                case VALIDARSERVICIOPRINCIPAL:                    /*                   LoginComandera loginComanderaTemp = new LoginComandera("","","","");                   res = service.LoginComandera( new Gson().toJson(loginComanderaTemp));                    if (res != "") {                        res = "Conectado";                    } else {                        res = "No conectado";                    }                     */                    res = service.Validar();                    datosRegresados.setDatosRegresadosString(res);                    break;                case VALIDARSERVICIOTERMINAL:                    res = service.ValidaWS();                    if (res != "") {                        res = "Conectado";                    } else {                        res = "No conectado";                    }                    datosRegresados.setDatosRegresadosString(res);                    break;                case LOGIN_COMANDERA:                    LoginComandera loginComandera = LoginComandera.class.cast(data);                    res = service.LoginComandera( new Gson().toJson(loginComandera));                    if(res!=""){                        Type resultadoLoginComanderaType = new TypeToken<ResultadoLoginComandera>(){}.getType();                        ResultadoLoginComandera resultadoLoginComandera = new Gson().fromJson(res,resultadoLoginComanderaType);                        datosRegresados.setDatosRegresados(resultadoLoginComandera);                    }else{                        throw new Exception(context.getString(R.string.msj_error_no_hay_resultado));                    }                    break;                case DATOSTERMINAL:                    Terminal terminal = Terminal.class.cast(data);                    res = service.DatosTerminal(terminal.getTerminal());                    Gson gson = new Gson();                    Terminal datosTerminal = gson.fromJson(res,Terminal.class);                    datosRegresados.setDatosRegresados(datosTerminal);                    break;                case AREASYMESAS:                    res = service.AreasYMesas();                    datosRegresados.setDatosRegresadosString(res);                    break;                case CARTAS:                    res = service.ListaCartas();                    if(res!=""){                        if(res == "image_nav_header_default_comanda"){                            throw new Exception("Hubo error");                        }else{                            List<Carta> lstCartas;                            Type listType = new TypeToken<ArrayList<Carta>>(){}.getType();                            lstCartas = new Gson().fromJson(res,listType);                            datosRegresados.setError(false);                            datosRegresados.setLstDatosRegresados(lstCartas);                        }                    }else{                        throw new Exception(context.getString(R.string.msj_error_no_hay_resultado));                    }                    break;                case CAJAS:                    res = service.Cajas();                    if(res!=""){                        Type resultadoCajasType = new TypeToken<ResultadoCajas>(){}.getType();                        ResultadoCajas resultadoCajas = new Gson().fromJson(res,resultadoCajasType);                        if(resultadoCajas.getMensaje().equals("")){                            datosRegresados.setDatosRegresados(resultadoCajas);                        }else{                            throw new Exception(resultadoCajas.getMensaje());                        }                    }else{                        throw new Exception(context.getString(R.string.msj_error_no_hay_resultado));                    }                    break;                case ALMACEN_MERCANCIA:                    res = service.Almacenes(EnumTipoAlmacen.MERCANCIA);                    if(res!=""){                        Type resultadoAlmacenType = new TypeToken<ResultadoAlmacen>(){}.getType();                        ResultadoAlmacen resultadoAlmacen = new Gson().fromJson(res,resultadoAlmacenType);                        if(resultadoAlmacen.getMensaje().equals("")){                            datosRegresados.setDatosRegresados(resultadoAlmacen);                        }else{                            throw new Exception(resultadoAlmacen.getMensaje());                        }                    }else{                        throw new Exception(context.getString(R.string.msj_error_no_hay_resultado));                    }                    break;                case ALMACEN_MATERIA_PRIMA:                    res = service.Almacenes(EnumTipoAlmacen.MATERIA_PRIMA);                    if(res!=""){                        Type resultadoAlmacenType = new TypeToken<ResultadoAlmacen>(){}.getType();                        ResultadoAlmacen resultadoAlmacen = new Gson().fromJson(res,resultadoAlmacenType);                        if(resultadoAlmacen.getMensaje().equals("")){                            datosRegresados.setDatosRegresados(resultadoAlmacen);                        }else{                            throw new Exception(resultadoAlmacen.getMensaje());                        }                    }else{                        throw new Exception(context.getString(R.string.msj_error_no_hay_resultado));                    }                    break;                case ORDEN_COMANDA:                    Comanda comanda = Comanda.class.cast(data);                    List<ComandaArticulo> lstTemp = new ArrayList<>();                    for(ComandaArticulo comandaArticulo : comanda.getListas()){                        comandaArticulo.setImagen("");                        lstTemp.add(comandaArticulo);                    }                    comanda.setListas(lstTemp);                    ComandaRequest comandaRequest = new ComandaRequest();                    comandaRequest.setALM_MP(comanda.getALM_MP());                    comandaRequest.setCOD_ALM(comanda.getCOD_ALM());                    comandaRequest.setCOD_USU(comanda.getCOD_USU());                    comandaRequest.setCOD_MESA(comanda.getCOD_MESA());                    comandaRequest.setListas(obtenerEstructuraComanda(comanda));                    String Json = new Gson().toJson(comandaRequest);                    res = service.OrdenComanda(Json);                    if(res!=""){                        Type typoResultado = new TypeToken<ResultadoGenerico>(){}.getType();                        ResultadoGenerico resultado = new Gson().fromJson(res,typoResultado);                        if(resultado.getIdRespuesta().equals("0")){                            datosRegresados.setDatosRegresados(resultado);                        }else{                            throw new Exception(resultado.getMensaje());                        }                    }else{                        throw new Exception(context.getString(R.string.msj_error_no_hay_resultado));                    }                    break;                case CERRAR_CAJA:                    Caja caja = Caja.class.cast(data);                    res= service.CajasCerrar(caja.getCodigo());                    if(res!=""){                        Type resultadoGenericoType = new TypeToken<ResultadoGenerico>(){}.getType();                        ResultadoGenerico resultadoGenerico = new Gson().fromJson(res,resultadoGenericoType);                        if(resultadoGenerico.getMensaje().equals("")){                            datosRegresados.setDatosRegresados(resultadoGenerico);                        }else{                            throw new Exception(context.getString(R.string.msj_error_cerrar_sesion));                        }                    }else{                        throw new Exception(context.getString(R.string.msj_error_cerrar_sesion));                    }                    break;                case TOMAR_MESA:                    Mesa mesa = Mesa.class.cast(data);                    res = service.TomarMesa(mesa.getCodigo(),String.valueOf(mesa.getNumeroCuentas()));                    if(!Boolean.valueOf(res)){                        datosRegresados.setError(false);                    }else{                        throw  new Exception(context.getString(R.string.msj_mesa_no_pudo_tomar));                    }                    break;                case OBTENER_NOTAS:                    ComandaArticulo articulo = ComandaArticulo.class.cast(data);                    res = service.Notas(articulo.getCOD_ART());                    if(res!=""){                        Type resultadoNotasType = new TypeToken<ArrayList<Nota>>(){}.getType();                        List<Nota> resultadoNotas = new Gson().fromJson(res,resultadoNotasType);//                        if(resultadoNotas.getMensaje().equals("")){                        datosRegresados.setLstDatosRegresados(resultadoNotas);                        /*}else{                            throw new Exception(resultadoAlmacen.getMensaje());                        }*/                    }else{                        throw new Exception(context.getString(R.string.msj_error_no_hay_resultado));                    }                    break;                case OBTENER_MODIFICADORES:                    String idReceta = String.class.cast(data);                    res = service.EstructuraModificadores(idReceta);                    if(res!=""){                        Type resultadoEstructuraModificadores = new TypeToken<Receta>(){}.getType();                        Receta resultadoReceta = new Gson().fromJson(res,resultadoEstructuraModificadores);//                        if(resultadoNotas.getMensaje().equals("")){                        datosRegresados.setDatosRegresados(resultadoReceta);                        /*}else{                            throw new Exception(resultadoAlmacen.getMensaje());                        }*/                    }else{                        throw new Exception(context.getString(R.string.msj_error_no_hay_resultado));                    }                    break;//                case OBTENER_CUENTAS_MESA://                    String idMesa = String.class.cast(data);//                    res = service.ListaCuentas(idMesa);////                    if(res!=""){//                        Type resultadoListaCuentas = new TypeToken<MesaCuenta>(){}.getType();//                        MesaCuenta resultadoCuentas = new Gson().fromJson(res,resultadoListaCuentas);//////                        if(resultadoNotas.getMensaje().equals("")){//                        datosRegresados.setDatosRegresados(resultadoCuentas);//                        /*}else{//                            throw new Exception(resultadoAlmacen.getMensaje());//                        }*/////                    }else{//                        throw new Exception(context.getString(R.string.msj_error_no_hay_resultado));//                    }////                    break;            }        }catch (Exception ex){            datosRegresados.setDatosRegresados(ex);            datosRegresados.setError(true);        }        return datosRegresados;    }    @Override    protected void onPostExecute(DatosRegresados datosRegresados){        if(showDefaultDialog){            switch (peticion){//            case LOGIN_COMANDERA:{//                break;//            }                default:                    pd.dismiss();                    break;            }        }        mListener.onLoadedDataLoadingTask(peticion,datosRegresados);        super.onPostExecute( datosRegresados );    }    /**     * <p>Applications should preferably override {@link #onCancelled(Object)}.     * This method is invoked by the default implementation of     * {@link #onCancelled(Object)}.</p>     *     * <p>Runs on the UI thread after {@link #cancel(boolean)} is invoked and     * {@link #doInBackground(Object[])} has finished.</p>     *     * @see #onCancelled(Object)     * @see #cancel(boolean)     * @see #isCancelled()     */    @Override    protected void onCancelled() {        super.onCancelled();        if(showDefaultDialog){            switch (peticion){//            case LOGIN_COMANDERA:{//                break;//            }                default:                    pd.dismiss();                    break;            }        }    }    private List<ComandaArticuloRequest> obtenerEstructuraComanda(Comanda comanda){        List<ComandaArticuloRequest> lst = new ArrayList<>();        for(ComandaArticulo comandaArticulo : comanda.getListas()){            ComandaArticuloRequest comandaArticuloRequest = new ComandaArticuloRequest();            comandaArticuloRequest.setCAN_PRO(comandaArticulo.getCAN_PRO());            comandaArticuloRequest.setPRE_ART(comandaArticulo.getPRE_ART());            comandaArticuloRequest.setDES_PRO(comandaArticulo.getDES_PRO());            comandaArticuloRequest.setNUM_CTA(comandaArticulo.getNUM_CTA());            comandaArticuloRequest.setCOD_ART(comandaArticulo.getCOD_ART());            List<ComandaModificador> lstModificadores = new ArrayList<>();            if(comandaArticulo.getModificable()==1){                for(ModificadorSeleccionado modificadorSeleccionado : comandaArticulo.getModificadorSeleccionados()){                    for(Modificador modificador: modificadorSeleccionado.getModificadoresSeleccionados()){                        ComandaModificador comandaModificador = new ComandaModificador();                        if(!modificadorSeleccionado.getTipo().equals("3")){                            comandaModificador.setId(modificador.getId());                            comandaModificador.setCantidad(modificador.getCantidad());                        }else{                            comandaModificador.setId(modificador.getId());                            comandaModificador.setCantidad(modificador.getCantidad());                            comandaModificador.setCodlista(modificadorSeleccionado.getCodlista());                        }                        lstModificadores.add(comandaModificador);                    }                }            }            comandaArticuloRequest.setModificadores(lstModificadores);            comandaArticuloRequest.setNOTA(getStringNotas(comandaArticulo));            lst.add(comandaArticuloRequest);        }        return lst;    }    private String getStringNotas(ComandaArticulo comandaArticulo){        String stringNotas = "";        for(int i = 0 ; i<comandaArticulo.getNotasList().size();i++){            if(i != 0){                stringNotas += "\r\n"+comandaArticulo.getNotasList().get(i);            }else{                stringNotas += comandaArticulo.getNotasList().get(i);            }        }        return stringNotas;    }}